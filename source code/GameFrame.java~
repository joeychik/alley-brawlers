/**
* GameFrame.java
* Main game
* A game where two players control characters to fight each other
* Based on the template provided by Mr. Mangat
* @author Eric Ke, Joey Chik
**/

//Graphics &GUI imports
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.Toolkit;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Image;
import javax.swing.ImageIcon;  
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.BorderFactory;
import javax.swing.border.EmptyBorder;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.File;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.sound.sampled.*;

import java.awt.Rectangle;

//Keyboard imports
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

//Mouse imports
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;

class GameFrame extends JFrame { 

  //class variable (non-static)
   static double x, y;
   static double scaleRatio;
   static GameAreaPanel gamePanel;
   Clip clip; //soundclip for music
   
   GameFrame thisFrame;
   // constants
   private static int CHARACTER_SIZE_X = 100;
   private static int CHARACTER_SIZE_Y = CHARACTER_SIZE_X * 2;
   
   Floor ground;
   Character player, player2; //players
   
   /**
    * Starts the game
    */
  GameFrame() {                      // IMPORTANT     add in extra parameters for selected characters.
    super("My Game"); 
    this.playMusic("FightForQuiescence.wav");//               this is how we get the character selection from the players
    // Set the frame to full screen 
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    
    this.thisFrame = this;
    this.scaleRatio = (double) Toolkit.getDefaultToolkit().getScreenSize().height / 1080;
    
    this.player = new Character(200,779 - CHARACTER_SIZE_Y, CHARACTER_SIZE_Y, CHARACTER_SIZE_X, scaleRatio, 'r', "resources/characters/patrick/"); //player 1
    this.player2 = new Character(1600,779 - CHARACTER_SIZE_Y, CHARACTER_SIZE_Y, CHARACTER_SIZE_X, scaleRatio, 'l', "resources/characters/lisa/"); //player 2

    gamePanel = new GameAreaPanel();
    gamePanel.setBackground(new Color(0, 0, 0, 0));
    
    this.setSize(Toolkit.getDefaultToolkit().getScreenSize().width,Toolkit.getDefaultToolkit().getScreenSize().height);
    this.setUndecorated(true);  //Set to true to remove title bar
    this.setBackground(new Color(0, 0, 0, 0));    
    
    //Set up the game panel (where we put our graphics)
    
    this.add(new GameAreaPanel());

    
    MyKeyListener keyListener = new MyKeyListener();
    this.addKeyListener(keyListener);

    MyMouseListener mouseListener = new MyMouseListener();
    this.addMouseListener(mouseListener);

    this.requestFocusInWindow(); //make sure the frame has focus   
    
    this.setVisible(true);
  
  } //End of Constructor
  
  public static double getScaleRatio() {
   return scaleRatio; 
  }
  
  /**
   * plays the music for the battle
   * @param filename the name of the file
   */
  public void playMusic(String filename) {
    clip = null;
     try {
      File audioFile = new File("resources/sound/" + filename);
      AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);
      DataLine.Info infoThing = new DataLine.Info(Clip.class, audioStream.getFormat());
      clip = (Clip) AudioSystem.getLine(infoThing);
      clip.addLineListener(new MusicListener());
      clip.open(audioStream);
      clip.start();
 
    }catch (Exception e) {
      e.printStackTrace();
       }
  }
  

  class MusicListener implements LineListener {
  /**
   * closes the music and restarts it when it finishes
   * @param event the music event
   */
    public void update(LineEvent event) {
      if (event.getType() == LineEvent.Type.STOP) {
        event.getLine().close();
        if (clip != null) {
          playMusic("FightForQuiescence.wav");
        }
      }
    }
  } 
  
  

  
  
  /** --------- INNER CLASSES ------------- **/
  
  // Inner class for the the game area - This is where all the drawing of the screen occurs
  private class GameAreaPanel extends JPanel {
    Clock clock;
    
    /**
     * creates a floor and a clock
     */
    GameAreaPanel() {
      //notice the x,y variables that we control from our animate method      
      ground = new Floor(scaleRatio);
      clock = new Clock(); 
    }
    
    /**
     * draws the graphics on the screen
     * @param g the graphics
     */
    public void paintComponent(Graphics g) {
      
      Font font = new Font("Arial", Font.PLAIN, (int)(scaleRatio * 48));
      super.paintComponent(g); //removed to keep transparent panel
      Image pic = new ImageIcon("resources/background.png").getImage();
      g.drawImage(pic,0,0, (int)(scaleRatio * 1920), (int)(scaleRatio * 1080), null);     
      setDoubleBuffered(true);
      //update things
      clock.update();
      player.update(clock.getElapsedTime());
      player2.update(clock.getElapsedTime());
      
      //floor collision detection
      if (player.getBoundingBox().intersects(ground.getBoundingBox())){
        player.setYSpeed(0);
        player.setJumping(false);
      }
      if (player2.getBoundingBox().intersects(ground.getBoundingBox())){
        player2.setYSpeed(0);
        player2.setJumping(false);
      }
      
      //ends game when someone loses
      if (player.getHealth() <= 0) {
       endGame((byte)2); 
      } else if (player2.getHealth() <= 0) {
       endGame((byte)1); 
      }
      
      //draw players
      player.draw(g);
      player2.draw(g);
      g.setFont(font);
      
      //health bars
      g.setColor(Color.BLACK);
      g.fillRect(0,(int)(scaleRatio*30),(int)(scaleRatio*300),(int)(scaleRatio*100));
      g.setColor(Color.RED);
      g.fillRect(0,(int)(scaleRatio*30),(int)((scaleRatio*300)*(player.getHealth()/player.getMaxHealth())),(int)(scaleRatio*100));
      g.setColor(Color.BLACK);
      g.fillRect(1620,(int)(scaleRatio*30),(int)(scaleRatio*300),(int)(scaleRatio*100));
      g.setColor(Color.RED);
      g.fillRect(1920-((int)((scaleRatio*300)*(player2.getHealth()/player2.getMaxHealth()))),(int)(scaleRatio*30),(int)((scaleRatio*300)*(player2.getHealth()/player2.getMaxHealth())),(int)(scaleRatio*100));
      
      //display player health
      g.setColor(Color.WHITE);
      g.drawString("HP: " + String.valueOf((int)player.getHealth()), (int)(scaleRatio * 10), (int)(scaleRatio * 100));
      g.setColor(Color.WHITE);
      g.drawString("HP: " + String.valueOf((int)player2.getHealth()), (int)(scaleRatio * 1700), (int)(scaleRatio * 100));
      repaint();
      
      
      
    }
    
   
    
  }
  
  /**
   * ends the game and opens up the victory screen
   */
  public void endGame(byte playerNum) {
    thisFrame.dispose();
    clip.stop();
    clip.close();
    clip = null;
    new VictoryScreen(playerNum); //CHANGE TO VICTORY SCREEN LATER OKAY
  }
  
  
  // -----------  Inner class for the keyboard listener - this detects key presses and runs the corresponding code
  private class MyKeyListener implements KeyListener {
    public void keyTyped(KeyEvent e) {
    }
    /**
     * makes the players do actions when specific keys are pressed
     * @param e the key pressed
     */
    public void keyPressed(KeyEvent e) {
      if (!player2.getAttacking()) {
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {  //If 'D' is pressed
          player2.moveRight();
          player2.setDirection('r');
        } 
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {  
          player2.moveLeft();
          player2.setDirection('l');
        }
        if (e.getKeyCode() == KeyEvent.VK_UP) {  
          player2.jump();
        }
        if (e.getKeyCode() == KeyEvent.VK_NUMPAD1) {  
          player2.attack(0, player);
        }
        if (e.getKeyCode() == KeyEvent.VK_NUMPAD2) {  
          player2.attack(1, player);
        }
        if (e.getKeyCode() == KeyEvent.VK_NUMPAD0) {  
          player2.attack(2, player);
        }
      }
      if (!player.getAttacking()) {
        if (KeyEvent.getKeyText(e.getKeyCode()).equals("D")) {  //If 'D' is pressed
          player.moveRight();
          player.setDirection('r');
        } 
        if (KeyEvent.getKeyText(e.getKeyCode()).equals("A")) {  
          player.moveLeft();
          player.setDirection('l');
        }
        if (KeyEvent.getKeyText(e.getKeyCode()).equals("W")) {  
          player.jump();
        }
        if (KeyEvent.getKeyText(e.getKeyCode()).equals("F")) {  
          player.attack(0, player2);
        }
        if (KeyEvent.getKeyText(e.getKeyCode()).equals("R")) {  
          player.attack(1, player2);
        } 
        if (KeyEvent.getKeyText(e.getKeyCode()).equals("E")) {  
          player.attack(2, player2);
        }
      }
      if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {  //If ESC is pressed
        System.exit(0);
      }
    }   
    
    /**
     * makes the players stop doing stuff when keys are released
     * @param e the key released
     */
    public void keyReleased(KeyEvent e) {
      if (KeyEvent.getKeyText(e.getKeyCode()).equals("D") || KeyEvent.getKeyText(e.getKeyCode()).equals("A")) {  //stop player 1
        player.stopMoving();
      } if (e.getKeyCode() == KeyEvent.VK_RIGHT || e.getKeyCode() == KeyEvent.VK_LEFT) {  //stop player 2
        player2.stopMoving();
      }
      
    }
  } //end of keyboard listener
  
  
  private class MyMouseListener implements MouseListener {
    
    public void mouseClicked(MouseEvent e) {
     
    }
    
    public void mousePressed(MouseEvent e) {
    }
    
    public void mouseReleased(MouseEvent e) {
    }
    
    public void mouseEntered(MouseEvent e) {
    }
    
    public void mouseExited(MouseEvent e) {
    }
  } //end of mouselistener
  
  
  
}